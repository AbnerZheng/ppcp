* Exercise2.1

** 1. It takes about 7.396s.

** 3. It takes about 4.076s, it still get correct answer.

** 4. No. Because when just using a volatile field, it could just gurantee visibility without atomicity. There will be some errors in addAndGet.

** 5. It takes about 3.851s when using java.util.concurrent.atomic.AtomicInteger. Almost nothing changed, because I use a local variable 'count' to store the sum of factors which partially calculate and there is no need to declared it final.

* Exercise2.2

** 1. Because the cache will be accessed very frequently, intersected with reading and writing. So the visibility is important, and volatile can gurantee this property.

** 2. In order to maintain immutable. Immutable object is naturelly thread-safe.


* Exercise2.3

** 1. Counts should be `final`. The method `increase` should be `synchronized`.
** 3.

* Exercise2.4

** 2. 19,904 ms
** 3. The times of the factorizer being called is 139692 and need 14,610 ms. Because it doesn't use a atomic computeIfAbsent function.
** 4. Times: 116079, Running time: 12,199ms. Not atomic.
** 5. Times: 115000, Time: 12,555ms. Because it use Future<V> as the value of the hashmap, and use putIfAbsent to gurantee the atomic of add Future<V>, so there must be one and only one Future<V> in the hashmap. So that the compute will only once.
** 6. Times: 115000, Time: 11,534ms.
** 7. Times: 115000, Time: 11,836ms. It's not responsive.
